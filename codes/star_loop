#!/bin/bash
set -e

AlignmentOutDefault=~/StarAlignments/ #
IndexDirectoryDefault=~/starIndex/ #
ReadFilesInDefault=zcat
RunIndexDefault=False #
SampNumDefualt=10 #

#option for are your files compressed - for us make defualt yes with zcat
#option for genome fasta files for indexing - could provide a default for our purposes

while :
do
    case "$1" in
      -a | --annotation) #annotation file corresponding to the genome
          AnnotationFile="$2"
	  shift 2
	  ;;
      -g | --genomefastafiles) #file path to the genome files for indexing. Must be supplied when -ri is supplied
          GenomeFiles="$2"
	  shift 2
	  ;;
      -i | --inputdirectory) #directory containing the fastq files to be processed
	  FastqDir="$2"  
	  shift 2
	  ;;
      -id | --indexingdirectory) #when supplied alone, indexing has been run, and points to the index directory. When supplied with -ri, serves as output directory for indexing.
	  IndexDirectory="$2"
	  shift 2
	  ;;
      -o | --outputdirectory) #directory where you'd like to send all your alignments
          AlignmentOut="$2"
	  shift 2
	  ;;
      -ri | --runindexing) #Only supplied if indexing has not been run. May be supplied with -id to name output directory. Must be supplied with -g genome files path (Right now only accepts 1 genome file).
	  RunIndex=True
	  shift 1
	  ;;
      -s | --samplenumber) #number of samples you wish to process. Assumes samples are paired fastq files. Default is 10.
	  SampNum="$2"
	  shift 2
	  ;;
      -*) #unknown 
	  echo "Error: Unknown option: $1" >&2
	  exit 1
	  ;;
      *)  # No more options
	  shift
	  break
	  ;;
     esac
done


if [ -z "$FastqDir" ] #check fastq directory is set otherwise exit 
then
	echo "Warning: Fastq directory not set"
	echo "Exiting" 
	exit 1
fi

if [ -z "$AnnotationFile" ] #check that an annotation file has been provided
then
	echo "Warning: Annotation file not provided"
	echo "Exiting"
	exit 1
fi

if [ -z "$AlignmentOut" ]
then
	AlignmentOut="${AlignmentOutDefault}"
	mkdir "${AlignmentOutDefault}"
fi
echo "sending output to ${AlignmentOut} (default is ${AlignmentOutDefault})"

if [ -z "$SampNum" ] #check that sample num is set to input or to default
then
	SampNum="$SampNumDefault"
fi
echo "using sample size of ${SampNum} (default is ${SampNum})"

if [ -z "$IndexDirectory" ]
then
	IndexDirectory="${IndexDirectoryDefault}"
fi

if [ -z "$RunIndex" && ! -d "$IndexDirectory" ] #If it does not exist 
then
	echo "Warning: Indexing files not supplied and indexing not being run"
	echo "Please provide either indexing files or run indexing"
	echo "Exiting"
	exit 1
elif [ -z "$RunIndex" && -d "$IndexDirectory" ] #If not running indexing, check that index directory exists
then
	RunIndex="${RunIndexDefaut}"
	echo "Not running indexing. Using index files located within ${IndexDirectory} "
fi

if [ "$RunIndex"=True && -z "$GenomeFiles" ] #if running indexing but no genome files have been provided throw an error
then
	echo "Warning: Indexing being run without genome files"
	echo "Please supply genome files with -g argument"
	echo "Exiting"
	exit 1
elif [ "$RunIndex"=True && -n "$GenomeFiles" &&  ! -d "$IndexDirectory" ] #if running indexing into a new directory everything is good
then
	mkdir "${IndexDirectory}"
elif [ "$RunIndex"=True && -n "$GenomeFiles" &&  -d "$IndexDirectory" ] #if running indexing into an old already existing directory then check that this is right - don't want to run indexing again if unecessary
then
	echo "Warning: ${IndexDirectory} exists and may contain files. Do you wish to overwrite this directory and its contents? No will exit"
	select yn in "Yes" "No"; do
		case $yn in
			Yes ) rm -r -f ${IndexDirectory}; mkdir ${IndexDirectory}; break;;
			No ) echo "exiting"; exit 1;;
		esac
	done
fi

#STAR indexing will go here
if [ "${RunIndex}"=True ]
then
	STAR --runMode genomeGenerate --genomeDir "${IndexDirectory}" --genomeFastaFiles "${GenomeFiles}"
fi

if [ -e fastq_list_star.txt ] #remove any files with this name to start with
then
	rm fastq_list_star.txt 
fi 
for file in `ls "${FastqDir}"*fastq.gz | cut -f 6 -d '/' | cut -f 1 -d '_' | uniq | head -n "${SampNum}"` #generate fastq list from scratch
do
	grep -m 1 $file ~/E-GEUV-1.sdrf.txt | cut -f 28,1 -d$'\t' >> fastq_list_star.txt #this hardcoded path may be problematic in the future
done

#filtering step in R goes here
Rscript ~/scripts/sample_filtering.R ~/fastq_list_star.txt ~/DATA/GEU_SNPs.txt

cat fastq_list_star.txt | while read line #iterate through the list
do
	Fastq=$( echo "${line}" | cut -f 2 -d$'\t' )
	Sample=$( echo "${line}" | cut -f 1 -d$'\t' )
	if [ -d "${AlignmentOut}""${Sample}_star" ] 
	then
		rm -rf "${AlignmentOut}""${Sample}_star" #remove any folders that might have this name
	fi
	mkdir "${AlignmentOut}""${Sample}_star" #make the directory
	cd "${AlignmentOut}""${Sample}_star" #go to that directory
	STAR --genomeDir "${IndexDirectory}" --sjdbGTFfile "${AnnotationFile}" --readFilesIn "${FastqDir}""${Fastq}"* --readFilesCommand zcat --quantMode TranscriptomeSAM --outSAMtype BAM Unsorted SortedByCoordinate
done
